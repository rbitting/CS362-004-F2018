        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* 	Unit Test 3 - initializeGame()
        -:    2:	
        -:    3:	Rachel Bitting
        -:    4:	10/25/2018
        -:    5:	
        -:    6:*/
        -:    7:
        -:    8:
        -:    9:#include "dominion.h"
        -:   10:#include <stdio.h>
        -:   11:#include <stdlib.h>
        -:   12:#include <assert.h>
        -:   13:#include <stdio.h>
        -:   14:#include <stdlib.h>
        -:   15:#include <string.h>
        -:   16:#include <math.h> 
        -:   17:
        -:   18:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed, struct gameState *state);
        -:   19:
function main called 1 returned 100% blocks executed 80%
        1:   20:int main(int argc, char* argv[]) {
        1:   21:	int successCount = 0;
        1:   22:	int TOTAL_COUNT = 5;
        -:   23:	
        1:   24:	struct gameState* game = newGame();
call    0 returned 100%
        1:   25:	int validKdCards[10] = {curse, estate, duchy, province, copper, silver, gold, adventurer, council_room, feast};
        -:   26:	
        1:   27:	printf("----------------- UNIT TEST 3: initializeGame() ----------------\n");
call    0 returned 100%
        -:   28:	
        -:   29:	/*** Test 1 ***/
        1:   30:	if (initializeGame(4, validKdCards, 30, game) > -1) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        1:   31:		successCount++;
        -:   32:		
        -:   33:		/*** Test 2 ***/
        1:   34:		if (supplyCount(curse, game) != 30) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   35:			printf("Test failed. Incorrect initial count for Curse.\n");
call    0 never executed
        -:   36:		}
        -:   37:		else {
        1:   38:			successCount++;
        -:   39:		}
        -:   40:		
        -:   41:		/*** Test 3 ***/
        1:   42:		if (supplyCount(duchy, game) != 12) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   43:			printf("Test failed. Incorrect initial supply count for Duchy.\n");
call    0 never executed
        -:   44:		}
        -:   45:		else {
        1:   46:			successCount++;
        -:   47:		}
        -:   48:	}
        -:   49:	else {
    #####:   50:		printf("Test failed. Valid initialization failed.\n");
call    0 never executed
        -:   51:	}
        -:   52:	
        -:   53:	/*** Test 4 ***/
        1:   54:	int invalidKdCards[10] = {curse, curse, duchy, province, copper, silver, gold, adventurer, council_room, feast};
        -:   55:	
        1:   56:	if (initializeGame(4, invalidKdCards, 30, game) > -1) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   57:		printf("Test Failed. Game should not initialize when there are duplicate cards in kingdom cards array.\n");
call    0 never executed
        -:   58:	}
        -:   59:	else {
        1:   60:		successCount++;
        -:   61:	}
        -:   62:	
        -:   63:	/*** Test 5 ***/
        1:   64:	if (initializeGame(5, validKdCards, 30, game) > -1) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   65:		printf("Test Failed. Game should not initialize when number of players is over the max allowed.\n");
call    0 never executed
        -:   66:	}
        -:   67:	else {
        1:   68:		successCount++;
        -:   69:	}
        -:   70:	
        -:   71:	// Print final results
        1:   72:	printf("%i out of %i tests passed.\n", successCount, TOTAL_COUNT);
call    0 returned 100%
        -:   73:	
        1:   74:	return 0;
        -:   75:}
