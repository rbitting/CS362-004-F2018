        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* 	Card Test 3 - Village
        -:    2:	
        -:    3:	Rachel Bitting
        -:    4:	10/28/2018
        -:    5:	
        -:    6:*/
        -:    7:
        -:    8:#include "dominion.h"
        -:    9:#include <stdio.h>
        -:   10:#include <stdlib.h>
        -:   11:#include <assert.h>
        -:   12:#include <stdio.h>
        -:   13:#include <stdlib.h>
        -:   14:#include <string.h>
        -:   15:#include <math.h> 
        -:   16:
        -:   17:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus);
        -:   18:
function assertTrue called 3 returned 100% blocks executed 44%
        3:   19:void assertTrue(int a, int b, int operator, char* string) {
        -:   20:	// Operator boolean signals to check for greater than
        3:   21:	if (operator == 1) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   22:		if (a > b) {
branch  0 never executed
branch  1 never executed
    #####:   23:			printf("%s PASSED\n", string);
call    0 never executed
        -:   24:		}
        -:   25:		else {
    #####:   26:			printf("%s FAILED\n", string);
call    0 never executed
        -:   27:		}
        -:   28:	}
        -:   29:	// Otherwise check for match
        -:   30:	else {
        3:   31:		if (a == b) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        3:   32:			printf("%s PASSED\n", string);
call    0 returned 100%
        -:   33:		}
        -:   34:		else {
    #####:   35:			printf("%s FAILED\n", string);
call    0 never executed
        -:   36:		}
        -:   37:	}
        3:   38:}
        -:   39:
function main called 1 returned 100% blocks executed 100%
        1:   40:int main(int argc, char* argv[]) {
        1:   41:    int discarded = 1;
        1:   42:    int shuffledCards = 0;
        -:   43:
        1:   44:    int handpos = 0, choice1 = -1, choice2 = -1, choice3 = -1, bonus = 0; 
        1:   45:    int seed = 1000;
        1:   46:    int numPlayers = 2;
        1:   47:    int thisPlayer = 0;
        -:   48:	struct gameState G, testG;
        1:   49:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy, council_room};
        -:   50:
        -:   51:	// initialize a game state and player cards
        1:   52:	initializeGame(numPlayers, k, seed, &G);
call    0 returned 100%
        -:   53:
        -:   54:
        -:   55:	// ----------- CARD TEST 3: Testing Village (+1 card and +2 actions) --------------
        1:   56:	printf("----------------- CARD TEST 3: Village ----------------\n");
call    0 returned 100%
        -:   57:
        -:   58:	// copy the game state to a test case
        1:   59:	memcpy(&testG, &G, sizeof(struct gameState));
        1:   60:	cardEffect(village, choice1, choice2, choice3, &testG, handpos, &bonus);
call    0 returned 100%
        -:   61:	
        -:   62:	// Cards being added to hand
        1:   63:	int newCards = 1;
        -:   64:	
        -:   65:	// Actions being added
        1:   66:	int newActions = 2;
        -:   67:	
        -:   68:	// Hand should have 1 card added after playing Village
        1:   69:	printf("hand count = %d, expected = %d\n", testG.handCount[thisPlayer], G.handCount[thisPlayer] + newCards - discarded);
call    0 returned 100%
        -:   70:	
        -:   71:	// Deck should have 1 less than before card play
        1:   72:	printf("deck count = %d, expected = %d\n", testG.deckCount[thisPlayer], G.deckCount[thisPlayer] - newCards + shuffledCards);
call    0 returned 100%
        -:   73:	
        -:   74:	// Actions should have 2 more added
        1:   75:	printf("actions = %d, expected = %d\n", testG.numActions, G.numActions + newActions);
call    0 returned 100%
        -:   76:	
        1:   77:	assertTrue(testG.handCount[thisPlayer], G.handCount[thisPlayer] + newCards - discarded, 0, "Hand counts match?");
call    0 returned 100%
        1:   78:	assertTrue(testG.deckCount[thisPlayer], G.deckCount[thisPlayer] - newCards + shuffledCards, 0, "Deck counts match?");
call    0 returned 100%
        1:   79:	assertTrue(testG.numActions, G.numActions + newActions, 0, "Number of actions match?");
call    0 returned 100%
        -:   80:	
        1:   81:	return 0;
        -:   82:}
