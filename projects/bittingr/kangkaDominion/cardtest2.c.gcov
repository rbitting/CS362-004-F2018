        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* 	Card Test 1 - Adventurer
        -:    2:	
        -:    3:	Rachel Bitting
        -:    4:	10/28/2018
        -:    5:	
        -:    6:	Reveal cards from your deck until you reveal 2 Treasure cards. Put those Treasure cards into your hand and discard the other revealed cards.
        -:    7:*/
        -:    8:
        -:    9:
        -:   10:#include "dominion.h"
        -:   11:#include <stdio.h>
        -:   12:#include <stdlib.h>
        -:   13:#include <assert.h>
        -:   14:#include <stdio.h>
        -:   15:#include <stdlib.h>
        -:   16:#include <string.h>
        -:   17:#include <math.h> 
        -:   18:
        -:   19:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus);
        -:   20:
function assertTrue called 3 returned 100% blocks executed 89%
        3:   21:void assertTrue(int a, int b, int operator, char* string) {
        -:   22:	// Operator boolean signals to check for greater than
        3:   23:	if (operator == 1) {
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        1:   24:		if (a > b) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   25:			printf("%s PASSED\n", string);
call    0 never executed
        -:   26:		}
        -:   27:		else {
        1:   28:			printf("%s FAILED\n", string);
call    0 returned 100%
        -:   29:		}
        -:   30:	}
        -:   31:	// Otherwise check for match
        -:   32:	else {
        2:   33:		if (a == b) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        1:   34:			printf("%s PASSED\n", string);
call    0 returned 100%
        -:   35:		}
        -:   36:		else {
        1:   37:			printf("%s FAILED\n", string);
call    0 returned 100%
        -:   38:		}
        -:   39:	}
        3:   40:}
        -:   41:
function main called 1 returned 100% blocks executed 100%
        1:   42:int main(int argc, char* argv[]) {
        1:   43:	int newCards = 0;
        1:   44:    int discarded = 1;
        1:   45:    int shuffledCards = 0;
        -:   46:
        1:   47:    int handpos = 0, choice1 = -1, choice2 = -1, choice3 = -1, bonus = 0; 
        1:   48:    int seed = 1000;
        1:   49:    int numPlayers = 2;
        1:   50:    int thisPlayer = 0;
        -:   51:	struct gameState G, testG;
        1:   52:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy, council_room};
        -:   53:
        -:   54:	// initialize a game state and player cards
        1:   55:	initializeGame(numPlayers, k, seed, &G);
call    0 returned 100%
        -:   56:
        -:   57:
        -:   58:	// ----------- CARD TEST 2: Testing Adventurer --------------
        1:   59:	printf("----------------- CARD TEST 2: Adventurer ----------------\n");
call    0 returned 100%
        -:   60:
        -:   61:	// copy the game state to a test case
        1:   62:	memcpy(&testG, &G, sizeof(struct gameState));
        1:   63:	cardEffect(adventurer, choice1, choice2, choice3, &testG, handpos, &bonus);
call    0 returned 100%
        -:   64:	
        -:   65:	// Cards being added to hand
        1:   66:	newCards = 2;
        -:   67:	
        -:   68:	// Hand should have 2 more (treasure) cards after playing adventurer 
        1:   69:	printf("hand count = %d, expected = %d\n", testG.handCount[thisPlayer], G.handCount[thisPlayer] + newCards - discarded);
call    0 returned 100%
        -:   70:	
        -:   71:	// Deck should be 2 fewer than original
        1:   72:	printf("deck count = %d, expected = %d\n", testG.deckCount[thisPlayer], G.deckCount[thisPlayer] - newCards + shuffledCards);
call    0 returned 100%
        -:   73:	
        -:   74:	// Coins should be greater than original
        1:   75:	printf("coins = %d, expected = greater than %d\n", testG.coins, G.coins);
call    0 returned 100%
        -:   76:	
        1:   77:	assertTrue(testG.handCount[thisPlayer], G.handCount[thisPlayer] + newCards - discarded, 0, "Hand counts match?");
call    0 returned 100%
        1:   78:	assertTrue(testG.deckCount[thisPlayer], G.deckCount[thisPlayer] - newCards + shuffledCards, 0, "Deck counts match?");
call    0 returned 100%
        1:   79:	assertTrue(testG.coins, G.coins, 1, "Coin count has increased?");
call    0 returned 100%
        -:   80:	
        1:   81:	return 0;
        -:   82:}
