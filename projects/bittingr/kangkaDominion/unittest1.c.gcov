        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* 	Unit Test 1 - isGameOver()
        -:    2:	
        -:    3:	Rachel Bitting
        -:    4:	10/24/2018
        -:    5:*/
        -:    6:
        -:    7:
        -:    8:#include "dominion.h"
        -:    9:#include <stdio.h>
        -:   10:#include <stdlib.h>
        -:   11:#include <assert.h>
        -:   12:#include <stdio.h>
        -:   13:#include <stdlib.h>
        -:   14:#include <string.h>
        -:   15:#include <math.h> 
        -:   16:
function main called 1 returned 100% blocks executed 84%
        1:   17:int main(int argc, char* argv[]) {
        1:   18:	int successCount = 0;
        1:   19:	int TOTAL_COUNT = 3;
        1:   20:	struct gameState* g = malloc(sizeof(struct gameState));	// Create gameState
        -:   21:	
        1:   22:	printf("----------------- UNIT TEST 1: isGameOver() ----------------\n");
call    0 returned 100%
        -:   23:	
        -:   24:	/*** Test 1 ***/
        1:   25:	g->supplyCount[3] = 0; // Initialize province enum supply count as 0
        1:   26:	if (isGameOver(g) == 1) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        1:   27:		successCount++;
        -:   28:	}
        -:   29:	else {
    #####:   30:		printf("Test 1 failed. 0 supply count for province should return true for game over.\n");
call    0 never executed
        -:   31:	}
        1:   32:	g->supplyCount[3] = 1; // Revert province supply count to non-zero
        -:   33:	
        -:   34:	/*** Test 2 ***/
        -:   35:	// Initialize 3 card supply counts as 0
        1:   36:	g->supplyCount[2] = 0; 
        1:   37:	g->supplyCount[18] = 0; 
        1:   38:	g->supplyCount[6] = 0;
        1:   39:	if (isGameOver(g) == 1) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        1:   40:		successCount++;
        -:   41:	}
        -:   42:	else {
    #####:   43:		printf("Test 2 failed. 0 supply count for three cards should return true for game over.\n");
call    0 never executed
        -:   44:	}
        -:   45:	
        -:   46:	/*** Test 3 ***/
        -:   47:	int i;
        -:   48:	// Set every card supply to >0
       26:   49:	for (i = 0; i < 25; i++) {
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
       25:   50:		g->supplyCount[i] = 5;
        -:   51:    }
        1:   52:	if (isGameOver(g) == 0) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        1:   53:		successCount++;
        -:   54:	}
        -:   55:	else {
    #####:   56:		printf("Test 3 failed. Game over returned true when only 2 decks are out of cards.\n");
call    0 never executed
        -:   57:	}
        -:   58:	
        -:   59:	// Print final results
        1:   60:	printf("%i out of %i tests passed.\n", successCount, TOTAL_COUNT);
call    0 returned 100%
        -:   61:	
        1:   62:	return 0;
        -:   63:}
